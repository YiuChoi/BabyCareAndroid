// This file was generated by PermissionsDispatcher. Do not modify!
package com.llcwh.babycare.ui;

import android.support.v4.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class LoginActivityPermissionsDispatcher {
  private static final int REQUEST_REGISTER = 0;

  private static final String[] PERMISSION_REGISTER = new String[] {"android.permission.READ_PHONE_STATE"};

  private static final int REQUEST_ATTEMPTLOGIN = 1;

  private static final String[] PERMISSION_ATTEMPTLOGIN = new String[] {"android.permission.READ_PHONE_STATE"};

  private LoginActivityPermissionsDispatcher() {
  }

  static void registerWithCheck(LoginActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_REGISTER)) {
      target.register();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_REGISTER)) {
        target.showRationaleForPhoneState(new RegisterPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_REGISTER, REQUEST_REGISTER);
      }
    }
  }

  static void attemptLoginWithCheck(LoginActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_ATTEMPTLOGIN)) {
      target.attemptLogin();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ATTEMPTLOGIN)) {
        target.showRationaleForPhoneState(new AttemptLoginPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_ATTEMPTLOGIN, REQUEST_ATTEMPTLOGIN);
      }
    }
  }

  static void onRequestPermissionsResult(LoginActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_REGISTER:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_REGISTER)) {
        target.showDeniedForCamera();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.register();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_REGISTER)) {
          target.showNeverAskForCamera();
        } else {
          target.showDeniedForCamera();
        }
      }
      break;
      case REQUEST_ATTEMPTLOGIN:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_ATTEMPTLOGIN)) {
        target.showDeniedForCamera();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.attemptLogin();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_ATTEMPTLOGIN)) {
          target.showNeverAskForCamera();
        } else {
          target.showDeniedForCamera();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class RegisterPermissionRequest implements PermissionRequest {
    private final WeakReference<LoginActivity> weakTarget;

    private RegisterPermissionRequest(LoginActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LoginActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_REGISTER, REQUEST_REGISTER);
    }

    @Override
    public void cancel() {
      LoginActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForCamera();
    }
  }

  private static final class AttemptLoginPermissionRequest implements PermissionRequest {
    private final WeakReference<LoginActivity> weakTarget;

    private AttemptLoginPermissionRequest(LoginActivity target) {
      this.weakTarget = new WeakReference<>(target);
    }

    @Override
    public void proceed() {
      LoginActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_ATTEMPTLOGIN, REQUEST_ATTEMPTLOGIN);
    }

    @Override
    public void cancel() {
      LoginActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForCamera();
    }
  }
}
